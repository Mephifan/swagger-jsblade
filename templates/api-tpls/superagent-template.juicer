{@if !config.surroundMode}{@include file://./common/header-template.juicer, _}
{@/if}{@if config.surroundMode}    {@/if}{@include file://./common/common-fn-template.juicer, _}
{@include file://./common/interceptor1-template.juicer, _}

/*
 * 发送请求
 * */
Utils.sendReq = function (resolve, reject, _options, success, error) {
    var postFnStr = 'send';
    if (_options.isForm) {
        postFnStr = 'field';
    }
    delete _options.isForm;
    if (Utils.useInterceptor) {
        var promisePre = new Promise(function (preResolve, preReject) {
            preResolve(_options);
        });
        promisePre
            .then(function (config) {
                return Utils.interceptor.request(config);
            })
            .catch(function (err) {
                return Utils.interceptor.requestError(err);
            })
            .then(function (options) {
                return new Promise(function (sufResolve, sufReject) {
                    superagent(options.method, options.url)
                        {@if config.withCredentials}.withCredentials(){@/if}
                        .query(options.params)
                        .set(options.headers || {})
                        [postFnStr](options.data)
                        .end(function (_err, _res) {
                            var res = _res || {};
                            if (_err) {
                                res.error = res.error || _err;
                                res.req = res.req || _err;
                            }
                            sufResolve(res);
                        });
                });
            })
            .then(function (res) {
                return Utils.interceptor.response(res);
            })
            .then(function (res) {
                var err = res.error;
                var data = res.body;
                if (err) {
                    return Utils.interceptor.responseError({
                        status: res.status || err.status,
                        headers: res.headers || {},
                        config: res.req || {},
                        message: res.statusText || err.message || ''
                    });
                }
                if (Utils.isFunction(success)) {
                    data = success(data);
                }
                resolve(data);
                return null;
            })
            .then(function (_err) {
                var err = _err;
                if (err) {
                    if (Utils.isFunction(error)) {
                        err = error(err);
                    }
                    reject(err);
                }
            });
    } else {
        superagent(_options.method, _options.url)
            {@if config.withCredentials}.withCredentials(){@/if}
            .query(_options.params)
            .set(_options.headers || {})
            [postFnStr](_options.data)
            .end(function (_err, res) {
                var data;
                var err = _err;
                if (!err) {
                    data = res.body;
                    if (Utils.isFunction(success)) {
                        data = success(data);
                    }
                    resolve(data);
                } else {
                    if (!err.response) {
                        err.response = {};
                    }
                    err = {
                        status: err.status,
                        headers: err.response.headers,
                        config: err.response.req,
                        message: err.message
                    };
                    if (Utils.isFunction(error)) {
                        err = error(err);
                    }
                    reject(err);
                }
            });
    }
};

{@include file://./common/apis-template.juicer, _}