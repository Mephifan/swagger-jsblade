{@if !config.surroundMode}{@include file://./common/header-template.juicer, _}
{@/if}{@if config.surroundMode}    {@/if}{@include file://./common/common-fn-template.juicer, _}
{@include file://./common/interceptor1-template.juicer, _}

/*
 * 发送请求
 * */
Utils.sendReq = function (resolve, reject, _options, success, error) {
    var url = '';
    delete _options.isForm;
    {@if config.withCredentials}options.credentials = 'include';{@/if}
    if (Utils.useInterceptor) {
        var promisePre = new Promise(function (preResolve, preReject) {
            preResolve(_options);
        });
        promisePre
            .then(function (config) {
                return Utils.interceptor.request(config);
            })
            .catch(function (err) {
                return Utils.interceptor.requestError(err);
            })
            .then(function (options) {
                return new Promise(function (sufResolve, sufReject) {
                    url = options.url;
                    delete options.url;
                    superbridge.fetch(url, options)
                        .then(function (res) {
                            options.url = url;
                            sufResolve({
                                body: res,
                                config: options
                            });
                        })
                        .catch(function (err) {
                            sufResolve({
                                error: err || {},
                                config: options
                            });
                        });
                });
            })
            .then(function (res) {
                return Utils.interceptor.response(res);
            })
            .then(function (res) {
                var err = res.error;
                var data = res.body;
                if (err) {
                    return Utils.interceptor.responseError(err);
                }
                if (Utils.isFunction(success)) {
                    data = success(data);
                }
                resolve(data);
                return null;
            })
            .then(function (_err) {
                var err = _err;
                if (err) {
                    if (Utils.isFunction(error)) {
                        err = error(err);
                    }
                    reject(err);
                }
            });
    } else {
        url = options.url;
        delete options.url;
        superbridge.fetch(url, options)
            .then(function (res) {
                data = res;
                if (Utils.isFunction(success)) {
                    data = success(data);
                }
                resolve(data);
            })
            .catch(function (err) {
                if (Utils.isFunction(error)) {
                    err = error(err);
                }
                reject(err);
            });
    }
};

{@include file://./common/createapi-template.juicer, _}

{@include file://./common/interceptor2-template.juicer, _}

{@include file://./common/apis-template.juicer, _}